//----------------------------------------------------------------------------------------------------;
//var fileNm = "js/b2link/ui/window.b2link.ui.getObject_ClassNameAndValueFromParentElement__Input_Depth2.js";
//if( console ) console.log( "[ S ] - " + fileNm + "----------" );
//----------------------------------------------------------------------------------------------------;

/**
 * targetElement의 ChildElement에 InputElement가 존재하는 경우 className으로 Object를 추출하기 위한 용도
 * targetElement로부터 Depth2 위치에 InputElement가 존재
 * @public
 * @function
 * @param {HTMLElement} t targetElement
 * @return {Object}
 * <code>
 * { "className" : "", "className" : "", "className" : "", ... }
 * </code>
 */
window.b2link.ui.getObject_ClassNameAndValueFromParentElement__Input_Depth2 = function( t )
{
	window.Rh2Log.timeStamp( "---- [ S ] - window.b2link.ui.getObject_ClassNameAndValueFromParentElement__Input_Depth2():{Object}----------" );

	var r = {};
	/*/
	var f = window.b2link.ui.getObject_ClassNameAndValueFromParentElement__Input;
	var io;
	var a = t.children;
	var i=0, iLen=a.length;
	for( ; i<iLen; ++i )
	{
		io = a[ i ];
		var ir = f( io );
		for( var s in ir ) r[ s ] = ir[ s ];
	}
	//*/
	var a0 = t.children;
	var i=0, iLen=a0.length;
	for( ; i<iLen; ++i )
	{
		var a1 = a0[ i ].children;
		var jo;
		var j=0, jLen=a1.length;
		for( ; j<jLen; ++j )
		{
			jo = a1[ j ];
			if( "INPUT" == jo.tagName ) r[ jo.className ] = jo.value;
		}
	}
	//*/

	window.Rh2Log.timeStamp( "---- [ E ] - window.b2link.ui.getObject_ClassNameAndValueFromParentElement__Input_Depth2():{Object}----------" );

	return r;
};

//----------------------------------------------------------------------------------------------------;
//if( console ) console.log( "[ E ] - " + fileNm + "----------" );
//----------------------------------------------------------------------------------------------------;